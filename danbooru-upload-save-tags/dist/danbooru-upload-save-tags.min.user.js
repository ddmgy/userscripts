// ==UserScript==
// @name        danbooru-upload-save-tags
// @version     0.1.0
// @description Add ability to save/load tags on uploads page
// @author      ddmgy
// @namespace   ddmgy
// @match       *://*.donmai.us/uploads/*
// @match       *://*.donmai.us/posts/*
// @grant       none
// @run-at      document-body
// @downloadURL https://github.com/ddmgy/userscripts/blob/master/danbooru-upload-save-tags/dist/danbooru-upload-save-tags.min.user.js?raw=true
// @updateURL   https://github.com/ddmgy/userscripts/blob/master/danbooru-upload-save-tags/dist/danbooru-upload-save-tags.min.user.js?raw=true
// ==/UserScript==

"use strict";(()=>{var _="danbooru_upload_save_tags";var i="uploads",E=class d{db;constructor(t){this.db=t}add(t){return new Promise((n,s)=>{let o=this.db.transaction(i,"readwrite");o.addEventListener("error",r=>{console.error(`[danbooru-upload-save-tags] Error adding item: ${r}`),n(!1)});let e=o.objectStore(i).add(t);e.addEventListener("error",r=>{console.error(`[danbooru-upload-save-tags] Error adding item: ${r}`),n(!1)}),e.addEventListener("success",r=>n(!0))})}clear(){return new Promise((t,n)=>{let s=this.db.transaction(i,"readwrite");s.addEventListener("error",e=>{console.error(`[danbooru-upload-save-tags] Error clearing database: ${e}`),t(!1)});let a=s.objectStore(i).clear();a.addEventListener("error",e=>{console.error(`[danbooru-upload-save-tags] Error clearing database: ${e}`),t(!1)}),a.addEventListener("success",e=>t(!0))})}count(){return new Promise((t,n)=>{let s=this.db.transaction(i,"readonly");s.addEventListener("error",e=>{console.error(`[danbooru-upload-save-tags] Error counting items: ${e}`),t(-1)});let a=s.objectStore(i).count();a.addEventListener("error",e=>{console.error(`[danbooru-upload-save-tags] Error counting items: ${e}`),t(-1)}),a.addEventListener("success",e=>t(a.result))})}delete(t){return new Promise((n,s)=>{let o=this.db.transaction(i,"readwrite");o.addEventListener("error",r=>{console.error(`[danbooru-upload-save-tags] Error deleting item: ${r}`),n(!1)});let e=o.objectStore(i).delete(t);e.addEventListener("error",r=>{console.error(`[danbooru-upload-save-tags] Error deleting item: ${r}`),n(!1)}),e.addEventListener("success",r=>n(!0))})}deleteOld(t){return new Promise((n,s)=>{let o=this.db.transaction(i,"readwrite");o.addEventListener("error",r=>{console.error(`[danbooru-upload-save-tags] Error deleting items: ${r}`),n(!1)});let e=o.objectStore(i).delete(IDBKeyRange.upperBound(t-5*24*60*60*1e3));e.addEventListener("error",r=>{console.error(`[danbooru-upload-save-tags] Error deleting items: ${r}`),n(!1)}),e.addEventListener("success",r=>n(!0))})}get(t){return new Promise((n,s)=>{let o=this.db.transaction(i,"readonly");o.addEventListener("error",r=>{console.error(`[danbooru-upload-save-tags] Error getting item: ${r}`),s(new Error(`Error getting item: ${r}`))});let e=o.objectStore(i).get(t);e.addEventListener("error",r=>{console.error(`[danbooru-upload-save-tags] Error getting item: ${r}`),s(new Error(`Error getting item: ${r}`))}),e.addEventListener("success",function(r){n(this.result)})})}getAll(){return new Promise((t,n)=>{let s=this.db.transaction(i,"readonly");s.addEventListener("error",e=>{console.error(`[danbooru-upload-save-tags] Error getting items: ${e}`),n(new Error(`Error getting items: ${e}`))});let a=s.objectStore(i).getAll();a.addEventListener("error",e=>{console.error(`[danbooru-upload-save-tags] Error getting items: ${e}`),n(new Error(`Error getting items: ${e}`))}),a.addEventListener("success",function(e){t(this.result)})})}put(t){return new Promise((n,s)=>{let o=this.db.transaction(i,"readwrite");o.addEventListener("error",r=>{console.error(`[danbooru-upload-save-tags] Error putting item: ${r}`),n(!1)});let e=o.objectStore(i).put(t);e.addEventListener("error",r=>{console.error(`[danbooru-upload-save-tags] Error putting item: ${r}`),n(!1)}),e.addEventListener("success",r=>n(!0))})}static initialize(){return new Promise((t,n)=>{let s=window.indexedDB.open(_,2);s.addEventListener("upgradeneeded",function(o){let a=this.result;a.addEventListener("error",()=>{n(new Error("Error loading DB"))});let e=a.createObjectStore(i,{keyPath:"mediaAssetId",autoIncrement:!0});e.createIndex("mediaAssetId","mediaAssetId",{unique:!0}),e.createIndex("rating","rating",{unique:!1}),e.createIndex("tags","tags",{unique:!1}),e.createIndex("source","source",{unique:!1}),e.createIndex("originalTitle","originalTitle",{unique:!1}),e.createIndex("originalDescription","originalDescription",{unique:!1}),e.createIndex("translatedTitle","translatedTitle",{unique:!1}),e.createIndex("translatedDescription","translatedDescription",{unique:!1}),e.createIndex("parentId","parentId",{unique:!1}),e.createIndex("timestamp","timestamp",{unique:!1})}),s.addEventListener("error",()=>{n(new Error("Error opening DB"))}),s.addEventListener("success",function(){t(new d(this.result))})})}};async function f(d,t){let n=$("a[href^='/media_assets/']");if(!n.length)return;let s=/\/media_assets\/(\d+)/.exec(n.attr("href"));if(s===null)return;let o=+s[1],a=$('<button class="ui-button ui-widget ui-corner-all" type="button">Save</button>'),e=$('<button class="ui-button ui-widget ui-corner-all" type="button">Load</button>');$("div.tab-list").append(a),$("div.tab-list").append(e),a.on("click",async()=>{let r=$("span.radio input[type='radio']:checked").val(),c=$("#post_tag_string").val(),l=$("#post_source").val(),u=$("#post_artist_commentary_title").val(),g=$("#post_artist_commentary_desc").val(),p=$("#post_translated_commentary_title").val(),m=$("#post_translated_commentary_desc").val(),b=$("#post_parent_id").val(),v=new Date().getTime();await d.put({mediaAssetId:o,rating:r,tags:c,source:l,originalTitle:u,originalDescription:g,translatedTitle:p,translatedDescription:m,parentId:b,timestamp:v}),console.log(`[danbooru-upload-save-tags] Saved information for media asset ${o}`)}),e.on("click",async()=>{let r=await d.get(o);if(r===void 0)return;let{rating:c,tags:l,source:u,originalTitle:g,originalDescription:p,translatedTitle:m,translatedDescription:b,parentId:v}=r;c!==void 0&&$(`input#post_rating_${c}`).trigger("click"),$("#post_tag_string").val(l),$("#post_source").val(u),$("#post_artist_commentary_title").val(g),$("#post_artist_commentary_desc").val(p),$("#post_translated_commentary_title").val(m),$("#post_translated_commentary_desc").val(b),$("#post_parent_id").val(v),console.log(`[danbooru-upload-save-tags] Loaded information for media asset ${o}`)})}async function w(d,t){let s=(await(await fetch(`/posts/${t}.json?only=media_asset[id]`)).json()).media_asset.id;await d.delete(s),await d.deleteOld(new Date().getTime())}async function L(){E.initialize().then(d=>{var t;(t=/\/uploads\/(\d+)/.exec(window.location.pathname))?f(d,+t[1]):(t=/\/posts\/(\d+)/.exec(window.location.pathname))?w(d,+t[1]):console.error(`[danbooru-upload-save-tags] running on unknown page: ${window.location.href}`)}).catch(d=>console.error(`[danbooru-upload-save-tags] Error loading DB: ${d}`))}$(L);})();
